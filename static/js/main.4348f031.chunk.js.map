{"version":3,"sources":["components/Container/Container.js","components/GameCard/GameCard.js","components/Instructions/Instructions.js","components/GameMessage/GameMessage.js","components/Header/Header.js","components/Game/Game.js","App.js","serviceWorker.js","index.js"],"names":["Container","props","react_default","a","createElement","className","children","GameCard","role","aria-label","concat","animate","style","backgroundImage","image","onClick","handleClick","id","Instructions","Jumbotron","background-image","message","GameMessage","state","animating","renderMessage","_this","addAnimation","prevProps","newState","score","topScore","this","setState","_this2","onAnimationEnd","Component","Header","components_GameMessage_GameMessage","Game","data","shuffleDeck","sort","b","Math","random","resetDeck","resetData","map","item","Object","objectSpread","clicked","correctGuess","newData","newScore","newTopScore","max","animation","wrongGuess","gameCardClick","guessedCorrectly","components_Header_Header","components_Instructions_Instructions","components_Container_Container","components_GameCard_GameCard","key","App","components_Game_Game","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.4348f031.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Container.css\";\n\nconst Container = props => <main className=\"container\">{props.children}</main>;\n\nexport default Container;\n","import React from \"react\";\nimport \"./GameCard.css\";\n\nconst GameCard = props => (\n    <div\n        role=\"img\"\n        aria-label=\"click item\"\n        className={`gameCard ${props.animate? \"animated swing\": \"\"}`} \n        style={{ backgroundImage: `url(\"${props.image}\")` }}\n        onClick={() => props.handleClick(props.id)}\n    /> \n);\n\nexport default GameCard;","import React from \"react\";\nimport { Jumbotron } from 'reactstrap';\nimport \"./Instructions.css\";\n\nconst Instructions = (props) => (\n    <div className=\"jumbo\">\n        <Jumbotron style={{'background-image': `url(\"images/background.jpg\")`}} >\n            <h3 className=\"instructions\">{props.message}</h3>\n        </Jumbotron>\n    </div>\n);\n\nexport default Instructions;","import React, {Component} from \"react\";\nimport \"./GameMessage.css\";\n\nclass GameMessage extends Component {\n\n    state = {\n        animating: false,\n        message: \"\"\n    }\n\n    // for every state change\n    componentDidUpdate(prevProps) {\n\n      // will be passed into setState function\n      let newState = {\n        animating: true\n      }\n\n      // pass in score and topScore from the pervious state\n      const {score, topScore} = prevProps\n\n      // change messages depending on user inputs\n      if (score === 0 && topScore === 0) {\n        newState.message = \"\";\n      } else if (score !== 0 && topScore > 0) {\n        newState.message = \"correct\";\n      } else {\n        newState.message = \"incorrect\";\n      }\n\n      // set the state with the new message if the score changes, \n      // or the message and state message are not equal\n      if (score !== this.props.score || this.state.message !== newState.message) {\n        this.setState(newState);\n      }\n    }\n\n    // change the display message based on the message state\n    renderMessage = () => {\n        switch (this.state.message) {\n        case \"correct\":\n          return \"You membered!!\";\n        case \"incorrect\":\n          return \"Aww... You didn't member. :'(\";\n        default:\n          return \"Only click a berry once!\";\n        }\n    };\n\n    // add animation class when animateClass state updates\n    addAnimation = () => {\n      switch (this.state.message) {\n        case \"correct\":\n          return \"animated bounceIn\";\n        case \"incorrect\":\n          return \"animated swing\";\n        default:\n          return \"\";\n        }     \n    }\n\n    render() {\n        return(\n          <li \n            // if the state.aniamtion = true, add the class from animate.css to trigger the animation,\n            // also add the state.message as a class, which changes the color,\n            // if aniamtion.state = false, remove the aniamte.css class and add the '.black' class\n            className={` \n              gameMessage \n              ${this.state.animating? this.addAnimation(): \"\"}  \n              ${this.state.animating? this.state.message: \"black\"}\n            `}\n            id={`${this.state.message}`}\n            onAnimationEnd={() => this.setState({ animating: false })} \n          >\n            {this.renderMessage()}\n          </li>  \n        );\n    }\n}\n\nexport default GameMessage;\n","import React from \"react\";\nimport \"./Header.css\";\nimport GameMessage from \"../GameMessage\";\n\nconst Header = props => (\n    <div className=\"header\">\n        <ul>\n            <li><h2>Member Berries</h2></li>\n            <GameMessage score={props.score} topScore={props.topScore} />\n            <li id=\"score\">Score: {props.score} | Top Score: {props.topScore}</li>\n        </ul>\n        \n    </div>\n)\n\nexport default Header;\n\n","import React, { Component } from \"react\";\nimport Container from \"../Container\";\nimport GameCard from \"../GameCard\";\nimport Instructions from \"../Instructions\";\nimport Header from \"../Header\";\nimport data from \"../../data\";\n\n\nclass Game extends Component {\n\n    state = {\n        data,\n        score: 0,\n        topScore: 0,\n        message: \"Memmmber???\"\n    };\n\n    componentDidMount() {\n        this.setState({ data: this.shuffleDeck(this.state.data) });\n    }\n\n    // shuffle data\n    shuffleDeck = data => {\n        let newData = data.sort(function(a, b){return 0.5 - Math.random()});\n        return newData;\n    };\n\n    // resets all data to false\n    resetDeck = data => {\n        const resetData = data.map(item => ({ ...item, clicked: false }));\n        return this.shuffleDeck(resetData);\n      };\n\n    // checks if higher than new score and updates if so\n    correctGuess = newData => {\n        let newScore = this.state.score;\n        newScore++\n        let newTopScore = Math.max(newScore, this.state.topScore);\n\n        this.setState({\n            data: this.shuffleDeck(newData),\n            score: newScore,\n            topScore: newTopScore,\n            animation: \"animated swing\"\n        })\n    }\n\n    // restarts the game with fresh data\n    wrongGuess = newData => {\n        this.setState({\n            data: this.resetDeck(newData),\n            score: 0\n        })\n    }\n\n    // when a card is clicked, check if it has been clicked before,\n    // then update that cards clicked property\n    gameCardClick = id => {\n        let guessedCorrectly = false;\n        // newData will be the data array with updated clicked properties\n        const newData = this.state.data.map(item => {\n          if (item.id === id) {\n            if (!item.clicked) {\n              item.clicked = true;\n              guessedCorrectly = true;\n            }\n          }\n          return item;     \n        });\n        // if guessedCorrectly = true, run the correctGuess function,\n        // else run the wrongGuess function\n        guessedCorrectly ? this.correctGuess(newData) : this.wrongGuess(newData);\n      };\n\n    render() {\n        return (\n            <div className=\"animated fadeIn\">\n                <Header score={this.state.score} topScore = {this.state.topScore} />\n                <Instructions message={this.state.message} />\n                <Container>\n                    {\n                        this.state.data.map(item => (\n                            <div className=\"animated rubberBand\">\n                                <GameCard\n                                    key={item.id}\n                                    id={item.id} \n                                    image={item.image}\n                                    animate={!this.state.score && this.state.topScore}\n                                    clicked={item.clicked}\n                                    handleClick={this.gameCardClick}\n                                />      \n                            </div>  \n                        ))\n                    }\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default Game;\n","import React from 'react';\nimport Game from './components/Game';\n\nconst App = () => <Game/>;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}